// ===== V√ç D·ª§ 7: DESIGN PATTERNS =====

// ===== 1. SINGLETON PATTERN =====
class DatabaseConnection {
  private static instance: DatabaseConnection;
  private connectionString: string;
  private isConnected: boolean;

  private constructor() {
    this.connectionString = "mongodb://localhost:27017/myapp";
    this.isConnected = false;
    console.log("T·∫°o k·∫øt n·ªëi database m·ªõi");
  }

  public static getInstance(): DatabaseConnection {
    if (!DatabaseConnection.instance) {
      DatabaseConnection.instance = new DatabaseConnection();
    }
    return DatabaseConnection.instance;
  }

  public connect(): void {
    if (!this.isConnected) {
      this.isConnected = true;
      console.log(`ƒê√£ k·∫øt n·ªëi database: ${this.connectionString}`);
    } else {
      console.log("Database ƒë√£ ƒë∆∞·ª£c k·∫øt n·ªëi r·ªìi!");
    }
  }

  public disconnect(): void {
    if (this.isConnected) {
      this.isConnected = false;
      console.log("ƒê√£ ng·∫Øt k·∫øt n·ªëi database");
    }
  }

  public query(sql: string): string[] {
    if (this.isConnected) {
      console.log(`Th·ª±c hi·ªán query: ${sql}`);
      return [`result1`, `result2`, `result3`];
    } else {
      throw new Error("Ch∆∞a k·∫øt n·ªëi database!");
    }
  }

  public getConnectionStatus(): boolean {
    return this.isConnected;
  }
}

// ===== 2. FACTORY PATTERN =====
abstract class Vehicle {
  protected brand: string;
  protected model: string;

  constructor(brand: string, model: string) {
    this.brand = brand;
    this.model = model;
  }

  abstract start(): void;
  abstract stop(): void;
  abstract getInfo(): string;
}

class CarVehicle extends Vehicle {
  private doors: number;

  constructor(brand: string, model: string, doors: number = 4) {
    super(brand, model);
    this.doors = doors;
  }

  start(): void {
    console.log(`${this.brand} ${this.model} (xe h∆°i) ƒë√£ kh·ªüi ƒë·ªông`);
  }

  stop(): void {
    console.log(`${this.brand} ${this.model} (xe h∆°i) ƒë√£ d·ª´ng`);
  }

  getInfo(): string {
    return `Xe h∆°i ${this.brand} ${this.model} c√≥ ${this.doors} c·ª≠a`;
  }
}

class MotorbikeVehicle extends Vehicle {
  private engineSize: number; // cc

  constructor(brand: string, model: string, engineSize: number) {
    super(brand, model);
    this.engineSize = engineSize;
  }

  start(): void {
    console.log(`${this.brand} ${this.model} (xe m√°y) ƒë√£ kh·ªüi ƒë·ªông`);
  }

  stop(): void {
    console.log(`${this.brand} ${this.model} (xe m√°y) ƒë√£ d·ª´ng`);
  }

  getInfo(): string {
    return `Xe m√°y ${this.brand} ${this.model} ƒë·ªông c∆° ${this.engineSize}cc`;
  }
}

class TruckVehicle extends Vehicle {
  private payload: number; // t·∫•n

  constructor(brand: string, model: string, payload: number) {
    super(brand, model);
    this.payload = payload;
  }

  start(): void {
    console.log(`${this.brand} ${this.model} (xe t·∫£i) ƒë√£ kh·ªüi ƒë·ªông`);
  }

  stop(): void {
    console.log(`${this.brand} ${this.model} (xe t·∫£i) ƒë√£ d·ª´ng`);
  }

  getInfo(): string {
    return `Xe t·∫£i ${this.brand} ${this.model} t·∫£i tr·ªçng ${this.payload} t·∫•n`;
  }
}

// Factory class
class VehicleFactory {
  public static createVehicle(type: string, brand: string, model: string, ...args: any[]): Vehicle {
    switch (type.toLowerCase()) {
      case "car":
        return new CarVehicle(brand, model, args[0] || 4);
      case "motorbike":
        return new MotorbikeVehicle(brand, model, args[0] || 150);
      case "truck":
        return new TruckVehicle(brand, model, args[0] || 5);
      default:
        throw new Error(`Kh√¥ng h·ªó tr·ª£ lo·∫°i xe: ${type}`);
    }
  }

  public static getSupportedTypes(): string[] {
    return ["car", "motorbike", "truck"];
  }
}

// ===== 3. OBSERVER PATTERN =====
interface Observer {
  update(data: any): void;
  getId(): string;
}

interface Subject {
  addObserver(observer: Observer): void;
  removeObserver(observerId: string): void;
  notifyObservers(data: any): void;
}

class NewsPublisher implements Subject {
  private observers: Observer[] = [];
  private latestNews: string = "";

  public addObserver(observer: Observer): void {
    if (!this.observers.find(obs => obs.getId() === observer.getId())) {
      this.observers.push(observer);
      console.log(`ƒê√£ th√™m subscriber: ${observer.getId()}`);
    }
  }

  public removeObserver(observerId: string): void {
    const index = this.observers.findIndex(obs => obs.getId() === observerId);
    if (index !== -1) {
      this.observers.splice(index, 1);
      console.log(`ƒê√£ x√≥a subscriber: ${observerId}`);
    }
  }

  public notifyObservers(data: any): void {
    console.log(`\nüì¢ G·ª≠i tin t·ª©c ƒë·∫øn ${this.observers.length} subscribers...`);
    this.observers.forEach(observer => observer.update(data));
  }

  public publishNews(news: string): void {
    this.latestNews = news;
    console.log(`\nüóûÔ∏è Tin t·ª©c m·ªõi: ${news}`);
    this.notifyObservers({
      news: news,
      timestamp: new Date(),
      publisher: "VN News"
    });
  }

  public getLatestNews(): string {
    return this.latestNews;
  }

  public getSubscriberCount(): number {
    return this.observers.length;
  }
}

class NewsSubscriber implements Observer {
  private id: string;
  private name: string;
  private receivedNews: any[] = [];

  constructor(id: string, name: string) {
    this.id = id;
    this.name = name;
  }

  public update(data: any): void {
    this.receivedNews.push(data);
    console.log(`üìß ${this.name} nh·∫≠n tin: "${data.news}" l√∫c ${data.timestamp.toLocaleTimeString()}`);
  }

  public getId(): string {
    return this.id;
  }

  public getName(): string {
    return this.name;
  }

  public getReceivedNews(): any[] {
    return [...this.receivedNews];
  }

  public showHistory(): void {
    console.log(`\nüìö L·ªãch s·ª≠ tin t·ª©c c·ªßa ${this.name}:`);
    this.receivedNews.forEach((news, index) => {
      console.log(`${index + 1}. ${news.news} (${news.timestamp.toLocaleString()})`);
    });
  }
}

// ===== 4. STRATEGY PATTERN =====
interface PaymentStrategy {
  pay(amount: number): void;
  getPaymentType(): string;
}

class CreditCardPayment implements PaymentStrategy {
  private cardNumber: string;
  private cardHolderName: string;

  constructor(cardNumber: string, cardHolderName: string) {
    this.cardNumber = cardNumber;
    this.cardHolderName = cardHolderName;
  }

  pay(amount: number): void {
    console.log(`üí≥ Thanh to√°n ${amount.toLocaleString()}ƒë b·∫±ng th·∫ª t√≠n d·ª•ng`);
    console.log(`   Th·∫ª: ****${this.cardNumber.slice(-4)} - ${this.cardHolderName}`);
  }

  getPaymentType(): string {
    return "Credit Card";
  }
}

class PayPalPayment implements PaymentStrategy {
  private email: string;

  constructor(email: string) {
    this.email = email;
  }

  pay(amount: number): void {
    console.log(`üÖøÔ∏è Thanh to√°n ${amount.toLocaleString()}ƒë qua PayPal`);
    console.log(`   Email: ${this.email}`);
  }

  getPaymentType(): string {
    return "PayPal";
  }
}

class BankTransferPayment implements PaymentStrategy {
  private bankAccount: string;
  private bankName: string;

  constructor(bankAccount: string, bankName: string) {
    this.bankAccount = bankAccount;
    this.bankName = bankName;
  }

  pay(amount: number): void {
    console.log(`üè¶ Thanh to√°n ${amount.toLocaleString()}ƒë b·∫±ng chuy·ªÉn kho·∫£n`);
    console.log(`   Ng√¢n h√†ng: ${this.bankName} - STK: ****${this.bankAccount.slice(-4)}`);
  }

  getPaymentType(): string {
    return "Bank Transfer";
  }
}

class ShoppingCart {
  private items: { name: string; price: number; quantity: number }[] = [];
  private paymentStrategy: PaymentStrategy | null = null;

  public addItem(name: string, price: number, quantity: number = 1): void {
    const existingItem = this.items.find(item => item.name === name);
    if (existingItem) {
      existingItem.quantity += quantity;
    } else {
      this.items.push({ name, price, quantity });
    }
    console.log(`‚ûï ƒê√£ th√™m ${quantity} ${name} v√†o gi·ªè h√†ng`);
  }

  public removeItem(name: string): void {
    const index = this.items.findIndex(item => item.name === name);
    if (index !== -1) {
      this.items.splice(index, 1);
      console.log(`‚ûñ ƒê√£ x√≥a ${name} kh·ªèi gi·ªè h√†ng`);
    }
  }

  public setPaymentStrategy(strategy: PaymentStrategy): void {
    this.paymentStrategy = strategy;
    console.log(`üí∞ ƒê√£ ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n: ${strategy.getPaymentType()}`);
  }

  public getTotalAmount(): number {
    return this.items.reduce((total, item) => total + (item.price * item.quantity), 0);
  }

  public showCart(): void {
    console.log("\nüõí GI·ªé H√ÄNG:");
    if (this.items.length === 0) {
      console.log("   Gi·ªè h√†ng tr·ªëng");
      return;
    }

    this.items.forEach(item => {
      const total = item.price * item.quantity;
      console.log(`   ${item.name} x${item.quantity} - ${item.price.toLocaleString()}ƒë = ${total.toLocaleString()}ƒë`);
    });
    console.log(`   T·ªîNG C·ªòNG: ${this.getTotalAmount().toLocaleString()}ƒë`);
  }

  public checkout(): void {
    if (this.items.length === 0) {
      console.log("‚ùå Gi·ªè h√†ng tr·ªëng, kh√¥ng th·ªÉ thanh to√°n!");
      return;
    }

    if (!this.paymentStrategy) {
      console.log("‚ùå Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n!");
      return;
    }

    console.log("\nüí∞ THANH TO√ÅN:");
    this.showCart();
    this.paymentStrategy.pay(this.getTotalAmount());
    
    // Clear cart after payment
    this.items = [];
    console.log("‚úÖ Thanh to√°n th√†nh c√¥ng! Gi·ªè h√†ng ƒë√£ ƒë∆∞·ª£c x√≥a.");
  }
}

// ===== S·ª¨ D·ª§NG C√ÅC DESIGN PATTERNS =====

console.log("=== V√ç D·ª§ DESIGN PATTERNS ===");

// 1. SINGLETON PATTERN
console.log("\n--- 1. SINGLETON PATTERN ---");
const db1 = DatabaseConnection.getInstance();
const db2 = DatabaseConnection.getInstance();

console.log("db1 === db2:", db1 === db2); // true - c√πng m·ªôt instance

db1.connect();
db1.query("SELECT * FROM users");

// Th·ª≠ t·∫°o k·∫øt n·ªëi kh√°c
db2.connect(); // S·∫Ω b√°o ƒë√£ k·∫øt n·ªëi

// 2. FACTORY PATTERN
console.log("\n--- 2. FACTORY PATTERN ---");
console.log("C√°c lo·∫°i xe ƒë∆∞·ª£c h·ªó tr·ª£:", VehicleFactory.getSupportedTypes());

const car = VehicleFactory.createVehicle("car", "Toyota", "Camry", 4);
const motorbike = VehicleFactory.createVehicle("motorbike", "Honda", "Wave", 110);
const truck = VehicleFactory.createVehicle("truck", "Hyundai", "Mighty", 3.5);

const vehicles = [car, motorbike, truck];
vehicles.forEach(vehicle => {
  console.log(vehicle.getInfo());
  vehicle.start();
  vehicle.stop();
  console.log();
});

// 3. OBSERVER PATTERN
console.log("\n--- 3. OBSERVER PATTERN ---");
const newsPublisher = new NewsPublisher();

const subscriber1 = new NewsSubscriber("001", "Nguy·ªÖn VƒÉn A");
const subscriber2 = new NewsSubscriber("002", "Tr·∫ßn Th·ªã B");
const subscriber3 = new NewsSubscriber("003", "L√™ VƒÉn C");

// Subscribe to news
newsPublisher.addObserver(subscriber1);
newsPublisher.addObserver(subscriber2);
newsPublisher.addObserver(subscriber3);

// Publish news
newsPublisher.publishNews("Vi·ªát Nam v√¥ ƒë·ªãch AFF Cup!");
newsPublisher.publishNews("Gi√° xƒÉng tƒÉng 500ƒë/l√≠t t·ª´ ng√†y mai");

// Unsubscribe
newsPublisher.removeObserver("002");
newsPublisher.publishNews("Th·ªùi ti·∫øt h√¥m nay: M∆∞a r√†o v√† d√¥ng");

// Show history
subscriber1.showHistory();

// 4. STRATEGY PATTERN
console.log("\n--- 4. STRATEGY PATTERN ---");
const cart = new ShoppingCart();

// Add items to cart
cart.addItem("Laptop Dell", 15000000, 1);
cart.addItem("Chu·ªôt wireless", 500000, 2);
cart.addItem("B√†n ph√≠m c∆°", 2000000, 1);

cart.showCart();

// Try different payment strategies
console.log("\n--- Thanh to√°n b·∫±ng th·∫ª t√≠n d·ª•ng ---");
const creditCard = new CreditCardPayment("1234567890123456", "NGUYEN VAN A");
cart.setPaymentStrategy(creditCard);
cart.checkout();

// Add more items
cart.addItem("M√†n h√¨nh 24 inch", 3000000, 1);
cart.addItem("Tai nghe", 1000000, 1);

console.log("\n--- Thanh to√°n b·∫±ng PayPal ---");
const paypal = new PayPalPayment("user@example.com");
cart.setPaymentStrategy(paypal);
cart.checkout();

// Add more items
cart.addItem("USB 32GB", 200000, 3);

console.log("\n--- Thanh to√°n b·∫±ng chuy·ªÉn kho·∫£n ---");
const bankTransfer = new BankTransferPayment("1234567890", "Vietcombank");
cart.setPaymentStrategy(bankTransfer);
cart.checkout();

console.log("\n=== T√ìM T·∫ÆT DESIGN PATTERNS ===");
console.log("1. SINGLETON: ƒê·∫£m b·∫£o ch·ªâ c√≥ m·ªôt instance duy nh·∫•t (DatabaseConnection)");
console.log("2. FACTORY: T·∫°o ƒë·ªëi t∆∞·ª£ng m√† kh√¥ng c·∫ßn bi·∫øt class c·ª• th·ªÉ (VehicleFactory)");
console.log("3. OBSERVER: Th√¥ng b√°o thay ƒë·ªïi ƒë·∫øn nhi·ªÅu ƒë·ªëi t∆∞·ª£ng (NewsPublisher/Subscriber)");
console.log("4. STRATEGY: Thay ƒë·ªïi thu·∫≠t to√°n/chi·∫øn l∆∞·ª£c t·∫°i runtime (PaymentStrategy)");
